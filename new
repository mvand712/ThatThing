

function Check-TNSnames {
<#
.Synopsis
   Short description
.DESCRIPTION
   Long description
.EXAMPLE
   Example of how to use this cmdlet
#>
    [CmdletBinding()]
    Param(
        #[Parameter(Mandatory=$false)][ValidateSet('Stop', 'Inquire', 'Continue', 'SilentlyContinue')]$DebugPref='Continue'
    )

        $file = '.\test.txt'
        $output1 = '.\test2.txt' 
        $FunctionName = ((Get-PSCallStack)[0].Command)

        #Get file contents
        $Content = Get-Content -raw $file 

        #Remove whitespace
        $WSRemoved = $Content -replace "\s"

        #Remove CRLF
        $CRLFRemoved = $WSRemoved  -replace "`r`n","`n"

        #Matches "))" and NOT "))(", then remove trailing new line
        #Attempt to determine the end of each entry and inserting a new line
        $LineConverted = $CRLFRemoved -replace "(\){2})(?!\))(?!\()","))`r`n" -replace "`r`n$"

        #Split into array
        $ContentArray = $LineConverted -split "`r`n"

        #Check format of each line
        foreach($Entry in $ContentArray) {
            #Grab server name
            $ServerName = $Entry -split "="
            $Message = "Checking: {0}`r`n{1}" -f $ServerName[0], $Entry
            Write-Log -Message $Message -Severity 1 -Source $FunctionName
            
            #Confirm the line starts with a letter, number, or #
            If (!($Entry -match "^[a-z].*|^[A-Z].*|^[\d].*|^#.*")) {
                Write-Log -Message 'Entry does not start with a valid character' -Severity 3 -Source $FunctionName
            }

            #Count Parenthesis
            $LeftParenCount = ($Entry.ToCharArray() | Where-Object {$_ -eq '('} | Measure-Object).Count
            $RightParenCount = ($Entry.ToCharArray() | Where-Object {$_ -eq ')'} | Measure-Object).Count
            If ($LeftParenCount -ne $RightParenCount) {
                $Message = 'Orphaned parenthesis detected Left:{0} Right:{1}' -f $LeftParenCount, $RightParenCount
                Write-Log -Message $Message -Severity 3 -Source $FunctionName
                $Message = 'Extracted parenthesis: {0}' -f ($Entry -replace '[\w-=]')
                Write-Log -Message $Message -Severity 2 -Source $FunctionName
            }

            
        }

}
